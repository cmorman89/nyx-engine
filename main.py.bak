import ast
import time
import numpy as np
from nyx.engine.ecs.component.components import (
    GraphicComponent,
    TileComponent,
    TilemapComponent,
    TileSetComponent,
    TransformComponent,
)
from nyx.engine.ecs.nyx_entity_manager import NyxEntityManager
from nyx.engine.ecs.system.render_system import RenderSystem
from nyx.engine.ecs.system.tileset_system import TileSetSystem

if __name__ == "__main__":
    # Start the ECS System
    nyx_ecs = NyxEntityManager()
    # Make the renderer
    renderer = RenderSystem(view_width=100, view_height=40, manager=nyx_ecs)

    # Create tile:s
    with open("./examples/assets/nyx/block.nyx") as file:
        tile_1 = nyx_ecs.create_entity("block").add_component(
            TileComponent(0, np.array(ast.literal_eval(file.read()), dtype=np.uint8))
        )
    with open("./examples/assets/nyx/grass_block.nyx") as file:
        tile_2 = nyx_ecs.create_entity("grass_block").add_component(
            TileComponent(1, np.array(ast.literal_eval(file.read()), dtype=np.uint8))
        )
    # Create tileset
    tileset_entity = nyx_ecs.create_entity("tileset").add_component(TileSetComponent)
    tileset_sys = TileSetSystem(nyx_ecs)
    tileset_sys.add_tile(tile_1).add_tile(tile_2)

    # Create tilemap
    tilemap = nyx_ecs.create_entity("tilemap").add_component(
        TilemapComponent(np.array([]))
    )

    RenderSystem.clear_terminal()
    side = 3
    tile_1 = np.full((side, side), 200, dtype="u1")
    tile_2 = np.full((side, side), 100, dtype="u1")
    tile_3 = np.full((side, side), 130, dtype="u1")
    tile_4 = np.full((side, side), 55, dtype="u1")
    arrset = np.array([tile_1, tile_2, tile_3, tile_4])
    arrmap = np.array([[0, 1, 1], [2, 3, 2], [2, 0, 1]])
    h, w = arrmap.shape
    tiles = arrset[arrmap]

    # transpose(x (map), y (map), rows (tile), cols (tile))
    out = tiles.transpose(0, 2, 1, 3).reshape(h * side, w * side)

    graphic_tile = np.random.randint(low=196, high=201, size=(16, 16), dtype=np.uint8)

    tile_1 = (
        nyx_ecs.create_entity("tilemap")
        .add_component(TransformComponent(0, 0))
        .add_component(GraphicComponent(out))
    )
    renderer.render(clear_term=False)
    print(nyx_ecs)
    # while True:
    #     graphic_1 = np.random.randint(low=196, high=201, size=(16, 16), dtype=np.uint8)
    #     tile_1 = (
    #         nyx_ecs.create_entity("random-tile-colors")
    #         .add_component(TransformComponent(0, 0))
    #         .add_component(GraphicComponent(graphic_1))
    #     )
    #     graphic_3 = np.random.randint(low=22, high=51, size=(32, 32), dtype=np.uint8)
    #     tile_3 = (
    #         nyx_ecs.create_entity("random-tile-colors")
    #         .add_component(TransformComponent(100 - 96, 40 - 32))
    #         .add_component(GraphicComponent(graphic_3))
    #     )
    #     graphic_2 = np.random.randint(low=196, high=225, size=(8, 8), dtype=np.uint8)
    #     tile_2 = (
    #         nyx_ecs.create_entity("random-tile-colors")
    #         .add_component(TransformComponent(50 - 12, 20 - 4))
    #         .add_component(GraphicComponent(graphic_2))
    #     )

    #     renderer.render(clear_term=False)
    #     print(nyx_ecs)
    #     print(type[tile_1])
    #     print("Unloading assets:")
    #     nyx_ecs.unload_entity(tile_1).unload_entity(tile_2).unload_entity(tile_3)
    #     print(nyx_ecs)
    #     time.sleep(0.1)
