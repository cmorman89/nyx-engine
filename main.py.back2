from datetime import datetime
import ast
import os
import time
import numpy as np
from nyx.engine.ecs.component.components import TilemapComponent
from nyx.engine.ecs.system.render_system import RenderSystem
from nyx.engine.tileset_resource import TilesetResource
from nyx.engine.ecs.nyx_entity_manager import NyxEntityManager
from nyx.hemera.tilemap_renderer import TilemapRenderer


class TimeLogger:
    logs = {}

    def __init__(self, name: str = "Default"):
        self.name: str = name
        self.start_time: datetime = self.start()
        self.end_time: datetime = None
        self.delta_time: datetime = None

    def start(self):
        return datetime.now()

    def end(self, name: str = None):
        self.end_time = end_time = datetime.now()
        self.delta_time = delta_time = end_time - self.start_time
        self._add_log()

    def _add_log(self):
        TimeLogger.logs[self.name] = self.delta_time

    @staticmethod
    def print_logs(w, h, total):
        for key, val in TimeLogger.logs.items():
            duration_ms = val.total_seconds() * 1000  # Convert to milliseconds
            print(f"{str(key).ljust(40)}" + f" {duration_ms:.2f} ms".ljust(20))
            total += duration_ms if key == "RenderTileMap" or "RollTileMap" else 0
        print(
            "Total time:".ljust(40)
            + f" {total:.2f} ms ({1000/total:.2f} fps)".ljust(20)
        )
        print("Resolution:".ljust(40) + f" {w * 2} x {h} chars".ljust(20))


if __name__ == "__main__":
    bg_color = 33
    module_path = os.path.dirname(__file__)

    RenderSystem.clear_terminal()
    # Start Nyx
    nyx_ecs = NyxEntityManager()
    renderer = RenderSystem(ecs=nyx_ecs)

    # Load tile assets
    timer = TimeLogger(name="Loading: Import and Load Textures")
    # Asset 0
    path = os.path.join(module_path, "./examples/assets/nyx/block.nyx")
    with open(path) as file:
        tile_0 = np.array(ast.literal_eval(file.read()), dtype=np.uint8)
    # Asset 1
    path = os.path.join(module_path, "./examples/assets/nyx/grass_block.nyx")
    with open(path) as file:
        tile_1 = np.array(ast.literal_eval(file.read()), dtype=np.uint8)
    # Create asset 2
    tile_2 = np.full((16, 16), bg_color, dtype=np.uint8)
    # Asset 3
    path = os.path.join(module_path, "./examples/assets/nyx/pipe_cap.nyx")
    with open(path) as file:
        tile_3 = np.array(ast.literal_eval(file.read()), dtype=np.uint8)
    # Asset 4
    path = os.path.join(module_path, "./examples/assets/nyx/pipe_bottom.nyx")
    with open(path) as file:
        tile_4 = np.array(ast.literal_eval(file.read()), dtype=np.uint8)
        tile_4
    timer.end()

    # Make tileset dict
    timer = TimeLogger(name="Loading: MakeTileset")
    tileset = {0: tile_0, 1: tile_1, 2: tile_2, 3: tile_3, 4: tile_4}
    tileset_resource = TilesetResource(tileset_textures=tileset)
    timer.end()

    timer = TimeLogger(name="Loading: Create Tilemap")
    # Load tilemap array into entity
    path = os.path.join(module_path, "./examples/assets/nyx/tilemap.nyxmap")
    with open(path) as file:
        tilemap = np.array(ast.literal_eval(file.read()), dtype=np.uint8)
    # Expand tilemap pattern
    tilemap_pattern = np.array([[2], [2], [2], [2], [2], [1], [0]], dtype=np.uint8)
    tilemap = np.repeat(tilemap_pattern, 4, axis=1)
    tilemap[3, 3] = 3
    tilemap[4, 3] = 4
    tilemap_entity = nyx_ecs.create_entity("tilemap").add_component(
        TilemapComponent(tilemap, tilemap_bg=bg_color)
    )
    timer.end()

    # Initialize TilemapRenderer
    timer = TimeLogger(name="Loading: Start Tile Renderer")
    tilemap_renderer = TilemapRenderer(tileset_resource=tileset_resource)
    # Render
    tilemap_component = tilemap_entity.get_components().get("TilemapComponent")
    h, w = tilemap_component.tilemap_arr.shape
    h *= 16
    w *= 16
    timer.end()

    timer = TimeLogger(name="Rendering: Render Tilemap")
    tilemap_renderer.render(tilemap_component)
    timer.end()

    while True:
        total = 0

        timer = TimeLogger(name="Rendering: Scroll Tilemap")
        tilemap_renderer.scroll(1)
        timer.end()

        timer = TimeLogger(name="Rendering: Render Tilemap")
        tilemap_renderer.render_frame()
        timer.end()

        TimeLogger.print_logs(w, h, total)
        time.sleep(0.05)
